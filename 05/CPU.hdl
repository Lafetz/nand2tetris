// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
  
    Mux( a= true, b=instruction[5] ,sel=instruction[15], out=loadA); //A register
    Mux16( a=instruction, b=aluO,sel=instruction[15], out=Ain);
    ARegister(in=Ain , load=loadA , out=Aout,out[0..14]=addressM);
    //D
    And (a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=aluO , load=loadD, out=aluA );
  //Alu
    And(a=instruction[15],b=instruction[3],out=writeM);
    Mux16(a=Aout, b=inM , sel=instruction[12], out=aluB );
    And(a=instruction[11],b=instruction[15],out=zx);
    And(a=instruction[10],b=instruction[15],out=nx);
    And(a=instruction[9],b=instruction[15],out=zy);
    And(a=instruction[8],b=instruction[15],out=ny);
    And(a=instruction[7],b=instruction[15],out=f);
    And(a=instruction[6],b=instruction[15],out=no);
    ALU(x=aluA , y=aluB , zx= zx, nx= nx, zy=instruction[9] , ny= ny, f=f, no=no , out=outM,out=aluO, zr=outZ , ng=ng );

  //prep jump
   And(a=instruction[2], b=ng, out=j1 );
   And(a=instruction[1], b=outZ, out=j2 );
   Not(in=ng , out=notNG);
   Not(in=outZ , out=notZ);
   And(a=notNG, b=notZ, out=notposng );
   And(a=instruction[0], b=notposng , out=j3 );
   Or(a= j1, b=j2 , out=j12 );
   Or(a=j12, b=j3 , out= j123);

   And(a=j123,b=instruction[15],out=load);  
   Not(in=load, out=incr );
   PC(in=Aout, load=load , inc=incr, reset= reset, out[0..14]= pc);
}